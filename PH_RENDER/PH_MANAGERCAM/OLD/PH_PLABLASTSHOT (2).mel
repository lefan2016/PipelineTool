
// PLAYBLAST! v1.4  24/07/2015
// el color del boton "playblast" cambia cada vez que se actualizan IN/OUT
// no tira error de los displaycolor
// se puede ejecutar sin tener secuencia armada.


proc playblasteaGUI (){
    global string $nombrePB;
    $nombrePB = "";
    int $animIN = `playbackOptions -q -ast`;
    int $animOUT = `playbackOptions -q -aet`;
    global string $nameescena;
    $nameescena = `file -q -sn -shn`;
    $nameescena =  `substring $nameescena 1 (size($nameescena)-3)`;
    global string $winPlay;
    if ( `window -exists $winPlay` ) { deleteUI $winPlay;}
    string $winPlay = `window  -tlc 970 55 -s 0  -t "PH_PLAYBLAST v1.3" ventana_001` ;
    print (" PLAYBLAST v1.3");
    string $Clayout1 = `columnLayout  -w 333 -p $winPlay `;
    string $Rlayout2 = `rowLayout -p $Clayout1 -numberOfColumns 8`;
    radioButtonGrp -columnAlign 1 "left" -columnAlign 2 "left" -numberOfRadioButtons 2 -cw 1 60 -vertical -label "In/Out de " -select 2 -labelArray2 "Secuencia" "Timeline" botonRadio1;
    global string $inFrame="";    $inFrame= `intFieldGrp  -cw 1 33 -l "IN  =  "  -v1 $animIN inFrame`;
    global string $outFrame="";    $outFrame= `intFieldGrp  -cw 1 44 -l "OUT  =  " -v1 $animOUT outFrame`;
    text -l "Nombre: " -w 50;
    $nombrePB = `textField -w 150 -text ($nameescena +"_") `;
    button   -p $Rlayout2 -l "PLAYBLAST !" -w 100 -backgroundColor (rand (1)) (rand (1)) (rand (1)) -enableBackground 0 -command "tirarPlayblast()" boton_001;
    button  -p $Rlayout2 -l "Abrir Movies" -w 100 -command  "abrirCarpetas()";
    string $Rlayout3 = `rowLayout -cw1 700 -p $Clayout1 -numberOfColumns 1`;
    text -w 800 -align "center" -label "Doble click sobre un shot actualiza IN/OUT.    Control+ClickDer en la ventana de CameraSequencer asigna IN/OUT de secuencia completa.";
    showWindow $winPlay;
}

proc tirarPlayblast() {
    global string $nombrePB;
    global string $nameescena;
    global int $seleccionRadio1;
    button -e -bgc (rand (1)) (rand (1)) (rand (1)) boton_001;

        if (`headsUpDisplay -ex HUDFecha` == 1) {headsUpDisplay -rem HUDFecha;}
        if (`headsUpDisplay -ex HUDdatos` == 1) {headsUpDisplay -rem HUDdatos;}
        int $inF = (`intFieldGrp -q -v1 inFrame`);
        int $outF = (`intFieldGrp -q -v1 outFrame`);
            if ( $inF < $outF ) {
				select -cl;
                $QnombrePB = `textField -q -text $nombrePB `;

                // IN OUT de secuencia o de timeline??
                string $ruta = "";
                $seleccionRadio1 = `radioButtonGrp -q -sl botonRadio1`;
                if ($seleccionRadio1 == 2){ $seleccionRadio1 = 0;}

                // modifico la ruta dependiendo de si existe o no la ruta para poder meter el string en el flag
                if ( `file -q -exists ("D:/")` ) {print "prepara ruta en D";$ruta = "D:/";}
                    else {print "prepara ruta en C";$ruta = "C:/";}

                // creo displays

                headsUpDisplay -s 1 -b 0 -blockSize "small" -label "Escena :"  -labelFontSize "small" -command "rutaDeEscena()"
                              HUDdatos;
                headsUpDisplay -s 3 -b 0 -blockSize "small" -label "FECHA / HORA : "  -labelFontSize "small" -command "FechaDeEscena()"
                              HUDFecha;
                displayColor headsUpDisplayLabels 17;
                displayColor headsUpDisplayValues 17;

                // playblast
                playblast -fmt "qt" -startTime $inF  -endTime $outF -sequenceTime $seleccionRadio1 -forceOverwrite -filename ($ruta + "movies/" + $QnombrePB + "_PREV.mov")
                   -clearCache 1 -showOrnaments 1 -fp 1 -percent 100 -wh 1920 803 -offScreen -viewer 1 -useTraxSounds -compression "H.264" -quality 70;

                // borro displays
                headsUpDisplay -rem HUDFecha;
                headsUpDisplay -rem HUDdatos;

                }else{warning ("CHECKEAR IN Y OUT");}
}

proc string rutaDeEscena (){
    string $ruta =   `file -q -sn`;
    return $ruta;
}

proc string FechaDeEscena (){
    string $fecha = ( `date -format "DD/MM/YY   /    hh:mm"`);
    return $fecha;
}


proc abrirCarpetas() {
    system ("explorer/n," + "D:\\movies");
}

proc refreshGUIplayblast(){
    $animIN = `playbackOptions -q -ast`;
    $animOUT = `playbackOptions -q -aet`;
    intFieldGrp -e -v1 $animIN inFrame;
    intFieldGrp -e -v1 $animOUT outFrame;
    radioButtonGrp -e -select 2 botonRadio1;
    button -e -bgc (rand (1)) (rand (1)) (rand (1)) boton_001;

}

proc refreshGUIplayblastSecuenciaCompleta(){
    string $listaShots [] = `ls -type shot`;
    int $shotIN ;    int $secuenciaIN = `shot -q -sequenceStartTime $listaShots [0]`;
    int $shotOUT;int $secuenciaOUT;
    for ($cadaShot in $listaShots) {
        $shotIN = `shot -q -sequenceStartTime $cadaShot`;
        $shotOUT = `shot -q -sequenceEndTime $cadaShot`;
        if ($shotIN < $secuenciaIN) {$secuenciaIN = $shotIN;}
        if ($shotOUT > $secuenciaOUT) {$secuenciaOUT = $shotOUT;}
    }
    radioButtonGrp -e -select 1 botonRadio1;
    intFieldGrp -e -v1 $secuenciaIN inFrame;
    intFieldGrp -e -v1 $secuenciaOUT outFrame;
    button -e -bgc (rand (1)) (rand (1)) (rand (1)) boton_001;
}

//////////////////////////////////////////////////////////////////////////
playblasteaGUI ();
scriptJob -e playbackRangeSliderChanged refreshGUIplayblast;

if (`objExists "sequencer1"`==1){
	if( `popupMenu -exists cly_contextualTrash` ) {
		deleteUI cly_contextualTrash;
	}
	popupMenu
		-ctrlModifier 1
		-button 3
		-mm 1
		-p sequenceEditorPanel1
		-pmc (" refreshGUIplayblastSecuenciaCompleta()  ")
	cly_contextualTrash;
}else{print "PLAYBLAST ! v1.4: NO HAY SECUENCIA ARMADA";}
